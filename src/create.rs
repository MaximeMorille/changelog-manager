use std::error::Error;

use slug::slugify;

use crate::{
    entry::{Entry, Serializable},
    fs_manager::write_entry,
    git_info::GitInfo,
};

/// Starts the interactive mode to create a changelog entry.
///
/// # Arguments
///
/// * `info` - A `GitInfo` struct containing information about the current git state.
///
/// # Panics
///
/// This function will panic as it is not implemented yet.
pub fn start_interactive_mode(info: GitInfo) {
    panic!("Not implemented yet");
}

/// Creates a changelog entry and writes it to a file.
///
/// The filename is generated by slugifying the provided branch name.
///
/// # Arguments
///
/// * `entry` - A reference to an `Entry` struct that contains the changelog entry data.
/// * `branch` - A reference to a `String` that represents the branch name.
///
/// # Example
///
/// ```rust
/// use changelog_manager::entry::{Entry, Builder};
/// use changelog_manager::create::create_changelog_entry;
/// let entry = Entry::builder().title("Some title".to_string()).build();
/// let branch = String::from("feature/new-feature");
/// create_changelog_entry(&entry, &branch);
/// ```
pub fn create_changelog_entry(entry: &Entry, branch: &String) -> Result<(), Box<dyn Error>> {
    let filename = format!("{}.json", slugify(branch));
    let buffer = match entry.to_json() {
        Ok(buffer) => buffer,
        Err(e) => return Err(format!("Error while serializing entry: {}", e).into()),
    };
    match write_entry(&filename, buffer) {
        Ok(_) => Ok(()),
        Err(e) => Err(format!("Error while writing entry in file '{}': {}", &filename, e).into()),
    }
}

#[cfg(test)]
mod tests {
    use assert_fs::TempDir;

    use crate::{
        create::start_interactive_mode,
        entry::{Builder, Entry},
        git_info::{GitInfo, GitInfoProvider},
    };

    use super::create_changelog_entry;

    #[test]
    #[should_panic]
    fn test_start_interactive_mode() {
        start_interactive_mode(GitInfo::new().expect("Should be able to get git info"));
    }

    #[test]
    fn test_with_existing_branch() {
        let temp_dir = TempDir::new().expect("Failed to create temp dir");
        std::env::set_current_dir(&temp_dir).expect("Failed to set current directory");
        let entry = Entry::builder().title("Some title".to_string()).build();
        let branch = String::from("feature/new-feature");
        create_changelog_entry(&entry, &branch).expect("First call should not panic");
        let result = create_changelog_entry(&entry, &branch);
        assert!(result.is_err_and(
            |e| e.to_string().contains("Error while writing entry in file")
                && e.to_string().contains("File exists")
        ));
    }
}
